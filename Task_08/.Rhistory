attributes(my_vector)
my_vector
class(my_vector)
my_matrix - my_vector
my_matrix <- my_vector
/
?
?
"?"
?matrix
my_matrix2 <- matrix(4,5,1:20)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c( Bill, Gina, Kelly, Sean)
patients <- c( "Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_vector)
cbind("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frams)
class(data.frame)
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames()
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FLASE==TRUE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE%FALSE
FALSE&FALSE
TRUE&C(TRUE,FALSE,FALSE)
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE, FALSE, FALSE)
TRUE||c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
x
submit()
submit()
submit()
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div= 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
info()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is","fun!")
submit()
submit()
submit()
submit()
telegram(c("i", "love", "my" "dog"))
telegram(c("i", "love", "my", "dog"))
submit()
mad_libs(place= "beckley", adjective= "cold", noun= "phone")
submit()
submit
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=car$speed, y=car%dis)
plot(x=cars$speed, y=cars%dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab= "Speed")
plot(x = cars$speed, y = cars$dist, ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab= "Speed", ylab= "Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=(c(10,15))
plot(cars, xlim=(c(10,15))
plot(cars, xlim=(c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(formula= mpg~cyl, data=mtcars)
hist(c(mtcars$mpg))
hist(mtcars$mpg)
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)
write.csv(Data, "rawdata.csv", quote=F)
length(data)
nrwo(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
Feeds <- which(Data[,9] == "bottle")
berenMilk <- Data[Feeds, ]
head(berenMilk)
Feeds <- which(Data[, "event"] == "bottle")
Feeds <- which(Data$event == "bottle")
head(Feeds)
dayID <- apply(Data, 1, function(x) paster(x[1:3], collapse="-"))
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse= "-"))
dayID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which(Data$event == "birth")]
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse= "-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data$age <- dateID - dateID[which(Data$event == "birth")]
head(Data)
beren2 <- Data
beren3 <- beren2[order(beren2$age),]
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value [Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age [Feeds], var)
totalFeed <-tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value [Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov (beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot( beren3$value [Feeds] ~ beren3$caregiver[Feeds], xlab="who gave the bottle", ylab = "amount of milk consumed (oz)")
boxplot(beren3$value[Feeds]~beren3$caregiver[Feeds], xlab="who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
Extra Credit:
beren4 <- beren3[Naps, ]
beren4 <- beren3[Naps, ]
beren4 <- beren3[nap, ]
beren3 <-Data
beren4<- beren3[order(beren3$nap)]
beren4<- beren3[order(beren3$nap),]
beren4<- beren3[order(beren3$age),]
write.csv(beren4, "beren_new.csv", quote=F, row.names=FALSE)
Naps <- which(beren4$event=="nap")
startHour <-(beren4$startHour)
startHour <-(beren4$start_hour)
startMin <- (beren4$start_min)
stopHour<- (beren4$stop_hour)
stopMin <- (beren4$stop_min)
startHour
beren4$sleeptime <-((stopHour-startHour)*60)-(stopMin-startMin)
beren4$sleep.time <-((stopHour-startHour)*60)-(stopMin-startMin)
beren4
endHour<- (beren4$end_hour)
endMin <- (beren4$end_minute)
beren4$nap <- (((endHour-startHour)*60)- (endMin-startMin))
beren4
totalNaps<-tapply(beren4$nap, beren4$age, sum)
totalNaps
par(las=1,mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalNaps)), totalNaps, type="b", pch=16, xlab="age in days", ylab="time in minutes")
plot(as.numeric(names(totalNaps)),totalNaps,type="b",pch=16,xlab="age in days",ylab="time in minutes")
plot(as.numeric(names(totalNaps)),totalNaps,type="b",pch=16,xlab="age in days",ylab="time in min")
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1 e6, trueMean1, trueSD1)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <-5
population2 <- rnorm (1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan < makeBaby(PatGrandma, PatGrandpa)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus))/ length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/ length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/ length(Focus)
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/ length(Focus))
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="", xlab="proportion shared genes")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa==aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="freq.allele a", ylb="geno.freq")
plot(1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="freq.allele a", ylab="geno.freq")
p <- seq(from=0, to=1, by=0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[, "aa"], lwd=2, col="red")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq["aa"], lwd=2, col="red")
legent("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0, 1), ylim=c(0, 1), xlab="freq.allele a", ylab="geno.freq")
p <- seq(from=0, to=1, by=0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/50, pch=22, bg="red")
Pop <- simPop(50)
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes<- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line <- lm(tExt ~ Samples + 0)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <-5
population2 <- rnorm (1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
View(PatGrandpa)
View(Focus)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus))/ length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/ length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/ length(Focus)
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/ length(Focus))
#as the population size increases the distance from the points to the line increases as well. This means that as the population size increases there is more extinction for alleles.
#Extra Credit
install.packages("Imtest")
#as the population size increases the distance from the points to the line increases as well. This means that as the population size increases there is more extinction for alleles.
#Extra Credit
install.packages("IMTest")
library("IMTest")
source("http://jonsmitchell.com/code/fxn05.R)
source("http://jonsmitchell.com/code/fxn05.R)
Pop1 <- simPop(Popsize=50, nGeneration=100, initial_p=0.5, h=1, s=0)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize=50, nGenerations=100, initial_p = 0.5, h=1, s=0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1,), type="1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type="1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow(Pop1),Pop1[,1],ylim=c(0,1),type="1",xlab="generation",ylab="allele freq.",lwd=2)
plot(1:nrow(Pop1),Pop1[,1],ylim=c(0,1),type="1",xlab="generation",ylab="allele freq.",lwd=2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type="1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type="l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2)
legend("topleft", legend=c("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plotFit(nruns=10, n=50, ngens=100, init_p=0.5, h=1, s=0)
legend("topleft", legend=c("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type="l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2)
legend("topleft", legend=c("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plotFit(nruns=10, n=50, ngens=100, init_p=0.5, h=1, s=0)
Expectation<- c(10, 10, 10, 10)
Observed <- c(15, 15, 5, 5)
Chisq<- sum(((Expectation-Observed)^2)/Expectation)
barplot(rbind(Expecation, Observed), beside=T, main=bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "="~.(Chisq)), legend.text=c("expected", "observed"))
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
counts<- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds<- c("White", "Red", "Yellow", "Green", "Blue", "Black")
calcChi(counts[1,])
Chisqs<-apply(counts, 1, calcChi)
plotChis(counts)
plotChis(counts)
plotChis(counts)
plotChis(counts)
#
#
Avg<- mean(Chisqs)
#
#
backgroundAvgs<- tapply(Chisqs, results[,3], mean)
propSig<- length(which(Chisqs>11.70))/ lenght(Chisqs)
propSig<- length(which(Chisqs>11.70))/ length(Chisqs)
percSig<- round(100*propSig)
#
#
par(las=1, mar=c(4, 4, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01, cex.axis=1)
hist(Chisqs, main="", xlab= "chi-squared values", ylab="frequency")
par(las=1, mar=c(4,4,1,4,), mgp=c(2,0.5, 0), tck=-0.01, cex.axis=1)
par(las=1, mar=c(4,4,1,4), mgp=c(2,0.5, 0), tck=-0.01, cex.axis=1)
plot(1,1, xlim=c(0,400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at=1:length(backgrounds), labels=backgrounds)
mtext(side=1, expression(chi^2), cex=1,75, line=2.5)
counter<- 1
for(i in backgrounds) {
Data<- Chisqs[which(results[,3]== i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter<- counuter+1
}
for(i in backgrounds) {
Data<- Chisqs[which(results[,3]== i)]
addHist(Y=counter, Dat=Data, Color=backgroundCol[counter])
counter<- counter+1
}
abline(v=11.70, lty=2, lwd=2, col="black")
#
Simulation<- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtest(side=2, at=7, line=0, "simulated")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit<- c(1,1,1,1,1,1)
names(Fit)<- 1:6
Simulation2<-simDraws(1e4, w=fit)
Simulation2<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit<- c(0.1,1,1,1,1,1)
names(Fit)<- 1:6
Simulation3<- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0,0,0,0.25))
Fit<- c(0.1,1,1,1,1,1)
Fit<- c(0.5,0.6,0.7,1,1,1)
names(Fit)<-1:6
Simulation4<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit<-c(0.1,0.2,0.3,0.4,0.5,1)
names(Fit)<-1:6
Simulation5<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit<-c(0.1,0.1,0.1,0.1,0.1,1)
Simulation6<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
names(Fit)<-1:6
Simulation6<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(side=2, at=8, line=0, "sel.sim.")
Simulation7<-c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
source("http://jonsmitchell.com/code.reformatData07.R")
source('http://jonsmitchell.com/code.reformatData07.R')
source('http://jonsmitchell.com/code/reformatData07.R')
source("http://jonsmitchell.com/code/simFxn.R")
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s<- apply(overallFreq, 2, function(x) lines(overallFreq[,1],x, col=rgb(0,0,0,0.01)))
rescaleFreq<- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x) x-x[1])
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
s<- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
dYear<-c()
dAlleles<-c()
for(i in 3:ncol(overallFreq)) {
dYear<-c(dYear, overallFreq[,1])
Vec<-overallFreq[,i]
Init<-overallFreq[1,i]
dAlleles<-c(dAlleles, Vec-Init)
}
smoothScatter(dYear, dAlleles, colramp= Pal, nbin=100)
smoothScatter(dYear dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim-c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(allelFreqs$d_freq, alleleFreqs$d_birth, col= "blue")
points(alleFreqs$d_freq, alleleFreqs$d_birth, col= "blue")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col= "blue")
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col="red")
install.packages("ape")
library("ape")
library("phytools")
text.string<-
"(((((((cow, pig,), whale), (bat,(lemur,human))), (robin, iguana)), coelacanth), (gold_fish, trout)), shark);"
vert.tree<-read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frams="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B), (C,D)), E);")
plotTree(tree, offset=1)
tiplabels(frame="circle", bg='lightblue', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree<- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for the Anolis tree", tim=c(0,50), xlim=c(0,6))
tipEdges<- which(AnolisTree$edge[,2]<=Ntip(AnolisTree))
Lengths<- AnolisTree$edge.length
names(Lengths)<- AnolisTree$tip.label
names(Lengths)[which(Lengths==min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs<-sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
ltt(AnolisTree)
abline(0,1,lwd=2, col='red', lty=2)
fit.bd(AnolisTree, rho=0.2)
install.packages("treebase")
?plot.phylo
tree<-read.tree(text='(((A,B), (C,D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='red')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='blue')
plot.phylo(tree, type='radial')
plot(AnolisTree, cex=0.25)
Labs<-sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths==min(Lengths))
AnolisTree2<-drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)
abline(0,1, lwd=2, col='red', lty=2)
fit.bd(AnolisTree, rho=0.2)
library(ids)
install.packages(ids)
install.packages("ids")
library("ids")
Relabel<-adjective_animal(31, max_len=c(10,15))
Relabel
setwd("~/Desktop/Evolution/Tasks/Task_08")
setwd("C: ~/Desktop/Evolution/Tasks/Task_08")
getwd()
setwd("C:\Users\kabol\Desktop\Evolution\Tasks\Task_08")
setwd("C:\Users\kabol\Desktop\Evolution\Tasks")
setwd("C:\Users\kabol\Desktop\Evolution\Tasks")
setwd('C:\Users\kabol\Desktop\Evolution\Tasks')
setwd(C:\Users\kabol\Desktop\Evolution\Tasks\Task_08)
setwd("C:\Users\kabol\Desktop\Evolution\Tasks\Task_08")
setwd("C:\ Users\kabol\Desktop\Evolution\Tasks\Task_08")
setwd("C:\\ Users\\ kabol\\Desktop\\ Evolution\\ Tasks\\ Task_08")
setwd('C:\\Users\\kabol\\Desktop\\Evolution\\Tasks\\Task_08')
library("phytools")
read.tree()
