my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE & FALSE
TRUE&C(TRUE, FALSE, FALSE)
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,
| FALSE, FALSE).
TRUE | c(TRUE, FALSE, FALSE)
TRUE ||c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical(twins, twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
sumbit()
submit()
submit()
sbumit()
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
info()
submit()
remainder(5)
reaminder(11, 5)
remainder(11, 5)
remainder(divisior= 11, num= 5)
remainder(divisor= 11, num= 5)
remainder(4, div= 2)
arge(remainder)
agrs(remainder)
args(remainder)
submit()
evaluate(standard deviation(c1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation(c1.4, 3.6, 7.9, 8.8))
evaluate(c1.4, 3.6, 7.9, 8.8)
evaluate(standard deviation(c 1.4, 3.6, 7.9, 8.8))
evaluate(c (1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
info()
skip()
evaluate(funcion(x){x+1}, 6)
submit()
submit()
submit()
evaluate(function(x){x+1}, 6)
evaluate(x)
evaluate(x)
submit()
evaluate(function(x))
evaluate(function)
evaluate(func)
evaluate(function)
submit()
info()
skip()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, length(c(8, 4, 0)))
skip()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
skip()
skip()
length(function)
skip()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
info()
evaluate(length, c(8, 4, 0))
evaluate(length(c(8, 4, 0)))
skip()
evaluate(length(function()))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
info()
mian()
main()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
main()
data(cars)
help(cars)
head(cars)
plot(cars)
help(plot()
help(plot())
help(plot())
help(plot(cars))
help()
help("plot")
?plot
plot()
plot(x, y)
plot(x= speed, y= dist)
plot(x = car$speed, y = car$dist)
skip()
plot(x = cars$dist, y = cars$speed)
plot(x= cars$speed, y= cars$dist)
plot(x= cars$speed, y= cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist, xlab = Speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(main= "MY Plot")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "StoppingDistance", main= "My Plot")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot SUbtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch= 2)
mtcars()
data(mtcars)
?boxplot()
?boxplot
boxplot(formula= mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function(My First function)
boring_function('My First Function')
boring_function('My First Function!')
boring.function(My First Function!)
boring_function('My First Function!')
boring_function('My first function!')
boring_function\
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divsior= 11, num= 5)
remainder(divisor= 11, num= 5)
remainder(4, div+ 2)
remainder(4, div= 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
submit()
telegram(c("I", "Don't", "Like", "This"))
submit()
submit()
submit()
submit()
submit()
skip()
mad_libs(place= "Beckley", adjective= "lonely", noun= "house")
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
install.packages("swirl")
#install.packages("swirl")
library(swirl)
#install.packages("swirl")
library(swirl)
swirl()
library(pkg)
library(swirl)
rm(list=ls())
swirl()
swirl()
rm(list=ls())
library(swirl)
swirl()
library(swirl)
swirl()
lm
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl(0)
lm
fit <- lm(child ~ parent, galton)
summary(fit)
0
uninstall_course(swirl)
uninstall.packages("swirl")
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
lirbary(swirl)
library(swirl)
swirl()
remove.packages("swirl", lib="~/R/win-library/3.6")
insatll.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
getwd()
ls(computer)
ls()
x <- 9
ls()
list.files()
list.files
?list.files
agrs()
args()
args(list.files())
args(list.files)
old.dir
info()
"old.dir"
old.dir <- getwd()
dir.create(testdir)
dir.create()
testdir <- dir.create()
dir.create("test.dir")
dir.create("testdir")
stewd("testdir")
setwd("testdir")
file.create("mytest.r")
file.create("mytest.R")
ls()
list.files()
file.extists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path()
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", file.path("testdir3"))
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd()
setwd(dir.create)
setwd(old.dir)
1:20
pi:10
15:1
:
":"
?":"
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
x <- c(44,NA,5,NA)
x <- c(44,NA,5,NA), times=3
x times=3
x <- c(44,NA,5,NA) times=3
x <- c(44,NA,5,NA, times=3)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(3rd, 5h, 7th)
c(3,5,7)
x[c(3,5,7)]
x (i.e. x[0])
x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
[c("foo", "bar")]
vect[c("foo", "bar")]
my_vector <- ":"
my_vector <- 1:3
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attr(my_vector)
attribuutes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix - my_vector
my_matrix <- my_vector
/
?
?
"?"
?matrix
my_matrix2 <- matrix(4,5,1:20)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c( Bill, Gina, Kelly, Sean)
patients <- c( "Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_vector)
cbind("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frams)
class(data.frame)
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames()
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FLASE==TRUE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE%FALSE
FALSE&FALSE
TRUE&C(TRUE,FALSE,FALSE)
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE, FALSE, FALSE)
TRUE||c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
x
submit()
submit()
submit()
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div= 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
info()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is","fun!")
submit()
submit()
submit()
submit()
telegram(c("i", "love", "my" "dog"))
telegram(c("i", "love", "my", "dog"))
submit()
mad_libs(place= "beckley", adjective= "cold", noun= "phone")
submit()
submit
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=car$speed, y=car%dis)
plot(x=cars$speed, y=cars%dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab= "Speed")
plot(x = cars$speed, y = cars$dist, ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab= "Speed", ylab= "Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=(c(10,15))
plot(cars, xlim=(c(10,15))
plot(cars, xlim=(c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(formula= mpg~cyl, data=mtcars)
hist(c(mtcars$mpg))
hist(mtcars$mpg)
beren3
write.csv(Data, 'rawdata.csv', quote=F)
setwd("C:\\Users\\kabol\\Desktop\\Evolution\\Tasks\\Task_02")
Data <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
write.csv(Data, 'rawdata.csv', quote=F)
write.csv(Data, "rawdata.csv", quote=F)
write.csv(Data, "rawdata.csv", quote=F)
